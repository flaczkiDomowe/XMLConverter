<?php

namespace App\Connections\tests;



use App\Factories\ConnectionFactory;
use PDO;
use PHPUnit\Framework\TestCase;

class SQLiteConnectionTest extends TestCase
{
    private $conn;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->conn=ConnectionFactory::getSQLiteConnection();
        $this->conn->createTable('dogu', ['kako', 'mako']);
        $this->conn->createTable('kicia', ['igla', 'siano']);
    }

    private function dropTable($table){
        $sql=$this->conn->getConnection()->prepare("DROP TABLE ".$table);
        if(!$sql->execute()){
            print_r($sql->errorInfo());
        }
    }

    public function testCreateTable()
    {

        $rawConn = $this->conn->getConnection();
        $sql = "SELECT  `name` FROM sqlite_master WHERE `type`='table'  ORDER BY name";
        $result = $rawConn->query($sql);
        $kicia=false;
        if ($result) {
            while ($row = $result->fetch(PDO::FETCH_ASSOC)) {
               if( $row['name'] = 'kicia') {
                   $kicia = true;
               }
            }
        }
        self::assertTrue($kicia);
        $this->checkIfAllColumnsAreCreated('kicia',['igla','siano']);
    }

    private function checkIfAllColumnsAreCreated($tablename,$expectedColumnsArray){
        $tablesquery = $this->conn->getConnection()->query("PRAGMA table_info('".$tablename."');");
        $array=[];
        while ($row = $tablesquery->fetch(PDO::FETCH_ASSOC)) {
            $array[]=$row['name'];
        }
        foreach($expectedColumnsArray as $val) {
            self::assertTrue(in_array($val,$array));
        }
    }

    protected function tearDown(): void
    {
        parent::tearDown();
        $this->dropTable('kicia');
        $this->dropTable('dogu');
    }

    public function testInsert()
    {
        $values=['kako' => 'łęło', 'mako' => 'ęłó'];
        $this->conn->insert('dogu',$values );
        $results = $this->conn->getConnection()->query('SELECT * FROM dogu');
        $row = $results->fetch(PDO::FETCH_ASSOC);
        self::assertIsArray($row);
        self::assertArrayHasKey('kako',$row);
        self::assertArrayHasKey('mako',$row);
        self::assertEquals('łęło',$row['kako']);
        self::assertEquals('ęłó',$row['mako']);
    }
}
?>




}
}
